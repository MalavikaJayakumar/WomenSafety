angular.module('SnatchApp', [
    'ngRoute', 'ngCookies', 'ngAnimate', 'ngMaterial', 'ChatApp'
])
    .config(['$routeProvider', '$locationProvider', '$mdThemingProvider',
        function ($routeProvider, $locationProvider, $mdThemingProvider) {
            $routeProvider
                .when('/webchat', {
                    templateUrl: 'html/webchat.html'
                })
                .otherwise({
                    redirectTo: '/webchat'
                });

            $locationProvider.html5Mode({
                enabled: true,
                requireBase: false
            });

            $mdThemingProvider.definePalette('snatchapp', {
                '50': '0079fe',
                '100': '0079fe',
                '200': '0079fe',
                '300': '0079fe',
                '400': '0079fe',
                '500': '0079fe',
                '600': '0079fe',
                '700': '0079fe',
                '800': '0079fe',
                '900': '0079fe',
                'A100': '0079fe',
                'A200': '0079fe',
                'A400': '0079fe',
                'A700': '0079fe',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': ['50', '100',
                    '200', '300', '400', 'A100'
                ]
            });

            try {
                lineColor = '#' + $mdThemingProvider._PALETTES['snatchapp']['500'];
            } catch (ex) { }

            $mdThemingProvider.theme('default')
                .primaryPalette('snatchapp')
                .accentPalette('snatchapp');
        }
    ]);

angular.module('SnatchApp')
    .filter('unsafe', ['$sce', function ($sce) {
        return $sce.trustAsHtml;
    }])
    .filter('unsafelink', ['$sce', function ($sce) {
        return $sce.trustAsUrl;
    }]);

angular.module('ChatApp', [
        'ngRoute', 'ngCookies', 'ngAnimate', 'ngMaterial', 'angular-clipboard'
    ])
    .animation('.keep-scroll', ['$timeout', function ($timeout) {
        var keepScroll = function (element, leave) {
            var elementPos = element.offset().top,
                sParent = element.closest('.scroll-parent'),
                scrollPos;

            if (!sParent || !sParent.length) {
                return;
            }
            scrollPos = sParent[0].scrollTop
            if (elementPos > scrollPos) {
                element.scope().$emit('needBottomScroll', true);
            }
        };

        return {
            enter: function (element, doneFn) {
                $timeout(function () {
                    keepScroll(element);
                    doneFn();
                });
                scope = element.scope();
                if (!scope) {
                    return;
                }
                var watchResize = scope.$watch(function () {
                    return element.height();
                }, function ($new, $old) {
                    if ($new > $old) {
                        element.scope().$emit('needBottomScroll', true);
                        watchResize();
                    }
                    //remove watcher after 10 seconds.
                    $timeout(function () {
                        if (watchResize) {
                            watchResize();
                        }
                    }, 10000);
                });
            },
            leave: function (element, doneFn) {
                $timeout(function () {
                    keepScroll(element, true);
                    doneFn();
                });
            }
        };
    }]);

angular.module('ChatApp')
    .directive('scrollBottom', ['$timeout', function ($timeout) {
        return {
            scope: {
                scrollBottom: '=',
                scrollTo: '='
            },
            link: function (scope, element) {
                function scrollToBottom(newValue) {
                    if (newValue) {
                        $timeout(function () {
                            last = element.children().last();
                            if (!last) {
                                return;
                            }
                            element.animate({ scrollTop: last[0].scrollHeight }, 'fast');
                        });
                    }
                }
                scope.$watchCollection('scrollBottom', scrollToBottom);
                scope.$watchCollection('scrollTo', scrollToBottom);
                scope.$root.$on('needBottomScroll', scrollToBottom);
            }
        };
    }]);

angular.module('ChatApp')
    .directive('webchat', function () {
        return {
            restrict: 'E',
            scope: {
                testing: '@',
                botid: '@',
                userid: '@',
                lastmodule: '=?',
                checkFollowData: '=?'
            },
            templateUrl: '/html/iframe/webchat.html',
            controller: [
                '$scope', '$rootScope', '$mdDialog', '$window',
                '$location', '$routeParams', '$http', '$timeout',
                'FBService', 'MailService', 'SmsService', 'SlackService',
                'SkypeService', '$q', '$cookies', '$element', '$filter',
                '$mdMenu', 'clipboard', 'socketService',
                WebChatCtrl
            ],
            link: function (scope, element, attr) { }
        };
        function WebChatCtrl(
            $scope, $rootScope, $mdDialog, $window,
            $location, $routeParams, $http, $timeout,
            FBService, MailService, SmsService,
            SlackService, SkypeService, $q, $cookies, $element, $filter,
            $mdMenu, clipboard, socketService
        ) {
            $scope.issetImgHeader = true;
            $scope.disabeSendButton = true;
            $scope.disableReload = true;
            $scope.pushedIndex = null;
            $scope.messages = [];
            $scope.modules = [];
            $rootScope.switchChannelData = {};
            $scope.lastMessageID = 0;
            $scope.logo = HTTPREQ + HOST + '/favicon.ico';
            $scope.logoHost = HTTPREQ + HOST + '/favicon.ico';
            $scope.HOST = HOST;
            $scope.notShowList = false;
            $rootScope.botID = $routeParams.botID;
            $rootScope.appID = $routeParams.appID;
            $rootScope.userID = $userID;
            $rootScope.runWebChat = true;
            $scope.testingMode = false;
            $scope.webChatBotStore = false;
            $scope.extractedAddress = '';
            $scope.settings = {};
            socketService.connect();
            socketService.subscribe(function (json) {
                switch (json.path) {
                    case 'webchat.subscribe':
                        onSubscribe(json.data)
                        break;
                    case 'webchat.notify':
                        onNotify(json.data)
                        break;
                    case 'webchat.typing':
                        onTyping(json.data)
                        break;
                    case 'test.subscribe':
                        onSubscribe(json.data)
                        break;
                }
            });
            $scope.colorArray = [
                '#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',
                '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',
                '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',
                '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',
                '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',
                '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',
                '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',
                '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',
                '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',
                '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'
            ];
            // $scope.settings.hide_powered = 1;
            if ($rootScope.testingMode === true) {
                $scope.testingMode = true;
                $scope.testing = 'true';
            }

            if ($rootScope.webChatBotStore === true) {
                $scope.webChatBotStore = true;
            }
            $scope.nlpTypeTranslate = function (text) {
                if (text === 'default') {
                    return 'Pretrained'
                } else {
                    return 'Custom'
                }
            }
            $scope.moduleType = {
                10: 'Email',
                11: 'Url',
                12: 'Phone',
                13: 'Date',
                14: 'Number',
                15: 'Address',
                16: 'Duration',
                20: 'Extracted Data',
                21: 'Variables'
            };

            iOSDevice = !!navigator.platform.match(/iPhone|iPod|iPad/);
            if (iOSDevice) {
                $('body').addClass('iOs');
            }

            $scope.copyPhone = function (id) {
                var emailLink = document.querySelector('#phone' + id);
                clipboard.copyText(emailLink.innerHTML);
            };

            $scope.openMenu = function ($mdMenu, ev) {
                originatorEv = ev;
                $mdMenu.open(ev);
            };
            var $userID = $routeParams.userID,
                $path = '/channels/api/webchat/',
                url = HTTPREQ + HOST + '/img/custom/' + $scope.botid + '.png', //$routeParams.botID
                request = new XMLHttpRequest();
            if (!$userID) {
                $userID = $rootScope.userID;
            }

            if (!$scope.testing) {
                if (!$userID) {
                    $userID = $cookies.get('ChatLogin');
                } else {
                    $rootScope.userFromParams = true;
                }
            }

            if ($scope.botid) {
                $rootScope.botID = $scope.botid;
            }

            if ($scope.userid) {
                $rootScope.userID = $scope.userid;
            }

            if ($scope.appid) {
                $rootScope.appID = $scope.appid;
            }

            if ($scope.testing === 'true' || $routeParams.testingMode === 'true') {
                $scope.testingMode = true;
                $rootScope.appID = 'testing';
                //$rootScope.userID = 'webchat.' + Date.now() + '.testing';
                $userID = $rootScope.userID;
            }

            $scope.persistentMenu = [];
            $scope.status = {};
            $scope.firstScroll = false;
            $rootScope.sokets = $rootScope.sokets || {};
            $scope.chatSocketID = 'chat.' + Math.ceil(Math.random() * 1e15 + 1e15).toString(16);
            $scope.runSocket = function (oltherStartModuleID) {
                $scope.socketOnline = true;
                $rootScope.path = 'webchat.subscribe'
                if ($scope.testingMode) {
                    $rootScope.path = 'test.subscribe'
                    $rootScope.userID = 'webchat.' + Date.now() + '.testing';
                } else {
                    socketService.send({
                        path: 'webchat.subscribe', data: {
                            bot: parseInt($rootScope.botID),
                            user: $rootScope.userID,
                            type: $scope.testingMode ? 'testing' : 'web',
                            resubscribe: false
                        }
                    });
                }
                // $scope.ws.Emit('subscribe', JSON.stringify({
                //     bot: parseInt($rootScope.botID),
                //     user: $rootScope.userID,
                //     type: $scope.testingMode ? 'testing' : 'web',
                //     resubscribe: false
                // }));
                /*socketService.send({
                    path: 'webchat.subscribe', data: {
                        bot: parseInt($rootScope.botID),
                        user: $rootScope.userID,
                        type: $scope.testingMode ? 'testing' : 'web',
                        resubscribe: false
                    }
                });*/
                // $scope.ws.OnDisconnect(function () {
                //     $scope.socketOnline = false;
                //     if ($scope.socketTimeout) {
                //         clearTimeout($scope.socketTimeout);
                //     }
                //     $scope.socketTimeout = setTimeout(function () {
                //         delete $scope.ws;
                //         // $scope.runSocket();
                //         /*if ($scope.socketOnline) {
                //          $scope.getMessage();
                //          }*/
                //     }, 10000);
                // });
            };
            $scope.typingTurnOn = function () {
                $scope.status.typing = true;
            };
            $scope.typingTurnOff = function () {
                $scope.status.typing = false;
                if (!$scope.$$phase) {
                    $timeout(function () {
                        $scope.$apply();
                        $scope.inputFocus();
                    });
                }
                $scope.disabeSendButton = false;
            };
            $scope.$chatInput = $('#chat_input');
            $scope.inputFocusFlag = true;
            $scope.$chatInput.on('focus', function (ev) {
                $scope.inputFocusFlag = true;
            });
            $scope.inputFocus = function () {
                if ($scope.inputFocusFlag) {
                    $scope.$chatInput.focus();
                }
            };
            $scope.inputBlur = function () {
                $scope.inputFocusFlag = false;
            };
            /**$scope.focus = function () {
                if (!$scope.testingMode) {
                    $timeout(function () {
                        $scope.inputFocus();
                    }, 1000);
                }
            };*/
            $scope.menuChannels = [];
            $scope.getBotChanels = function () {
                $http.post('/channels/api/manager/getDeployedChannels', $rootScope.botID)
                    .then(function (response) {
                        var data = [];
                        $scope.menuChannels = [];
                        $rootScope.activeChannels = response.data;
                        angular.forEach($rootScope.activeChannels, function (channel, key) {
                            channel.type = key;
                            if (key === 'email' || key === 'slack' || key === 'twilio' || key === 'facebook') {
                                $scope.notShowList = false;
                            }
                            if (key !== 'webchat' && key !== 'api' && key !== 'skype' && key !== 'line') {
                                $scope.menuChannels.push(channel);
                            }
                        });
                        data[0] = $scope.notShowList;
                        data[1] = $scope.menuChannels;
                        $scope.$emit('getBotChanels', data);
                    }, function (resp) { });
            };
            $scope.getBotChanels();
            $scope.getSettings = function () {
                $http.get('/getWebchatSettings/' + $rootScope.botID).then(function (response) {
                    var data = [],
                        matchCustomImg,
                        resultImg;
                    if (response.data.status === true) {
                        $scope.name = response.data.name;
                        if (!$scope.testing) {
                            if ($window.document.title.indexOf($scope.name) === -1) {
                                $window.document.title = $scope.name + ' chat';
                            }
                        }
                        $scope.settings = response.data.settings;
                        if ($scope.settings.custom_img) {
                            matchCustomImg = $scope.settings.custom_img;
                            if (matchCustomImg.indexOf('cloudfront') !== -1) {
                                resultImg = $scope.settings.custom_img;
                            } else {
                                resultImg = HTTPREQ + HOST + '/img/custom/' + $scope.settings.custom_img;
                            }
                            $scope.logo = resultImg;
                        }
                    }
                    data[0] = response.data.name;
                    data[1] = response.data.settings;
                    $scope.$emit('getSettings', data);
                });
            };
            $scope.getSettings();
            $scope.owlCarusel = function () {
                $timeout(function () {
                    $('.owl-carousel').owlCarousel({
                        items: 1,
                        nav: true,
                        margin: 10,
                        autoHeight: true,
                        navText: [
                            '<i class="material-icons">chevron_left</i>',
                            '<i class="material-icons">chevron_right</i>'
                        ]
                    });
                }, 4000);
            };
            $rootScope.$watch('renewPersistent', function () {
                if ($rootScope.renewPersistent == true) {
                    $scope.getPersistentMenu();
                    $rootScope.renewPersistent = false;
                }
            });
            $scope.getPersistentMenu = function () {
                $scope.persistentMenu = [];
                $http.post('/bot/api/botctrl/getPersistentMenu', {
                    channel: 4,
                    botID: parseInt($rootScope.botID, 10)
                }).then(function (response) {
                    angular.forEach(response.data, function (el, index) {
                        $scope.persistentMenu.push(el);
                    });
                    if (($filter('filter')($scope.persistentMenu, { type: 4 })).length !== 0) {
                        $scope.blockedInputPersistentMenu = true;
                    } else {
                        $scope.blockedInputPersistentMenu = false;
                    }
                }, function () {
                    console('Error!');
                });
            };
            $scope.persistentStart = function (card) {
                if (card.type === 1) {
                    if (!card.value.match(/^https:\/\//)) {
                        result = card.value.replace(/(^\w+:|^)\/\//, '');
                        card.value = 'https://' + result;
                    }
                    window.open(card.value);
                }
                if (card.type === 2) {
                    $timeout(function () {
                        $scope.sendMessage(card.value);
                    });
                }
            };
            $scope.getPersistentMenu();
            $scope.getAdvancedSettings = function () {
                $http.get('/getBotChatSettings/' + $rootScope.botID).then(function (response) {
                    $scope.gmessHide = true;
                    $scope.avatarSwitcher = true;
                    $scope.loadStyles = true;
                    if (response.data) {
                        var styleDefault = false;
                        if ($scope.testingMode === true && (typeof $rootScope.webChatBotStore === 'undefined' || $rootScope.webChatBotStore === false)) {
                            styleDefault = true;
                        }
                        if (response.data.message_color && !styleDefault) {
                            $scope.messColor = response.data.message_color;
                        } else {
                            $scope.messColor = '#0079fe';
                        }
                        if (response.data.show_avatar) {
                            $scope.showAvatar = response.data.show_avatar;
                            if (response.data.show_avatar === 'show') {
                                $scope.avatarSwitcher = true;
                            } else {
                                $scope.avatarSwitcher = false;
                            }
                        } else {
                            $scope.showAvatar = 'show';
                            $scope.avatarSwitcher = true;
                        }
                        if (response.data.bot_message_color && !styleDefault) {
                            $scope.botMessColor = response.data.bot_message_color;
                        }
                        if (response.data.chat_header_color && !styleDefault) {
                            $scope.chatHeaderColor = response.data.chat_header_color;
                        }
                        if (response.data.header_text_color && !styleDefault) {
                            $scope.chatTextHeaderColor = response.data.header_text_color;
                        }
                        if (response.data.button_text_color) {
                            $scope.btnTxtClr = response.data.button_text_color;
                        } else {
                            $scope.btnTxtClr = 'FFFFFF';
                        }
                        if (response.data.button_color && !styleDefault) {
                            $scope.btnColor = response.data.button_color;
                        } else {
                            $scope.btnColor = '00AFF0';
                        }
                        if (response.data.greeting_message && !styleDefault) {
                            $scope.greetingMess = response.data.greeting_message;
                        } else {
                            $scope.gmessHide = true;
                        }
                        if (angular.isDefined(response.data.hide_header_logo)) {
                            $scope.hideHeaderLogo = response.data.hide_header_logo;
                        } else {
                            $scope.hideHeaderLogo = false;
                        }
                        if (response.data.gmess_hide == false) {
                            $scope.gmessHide = response.data.gmess_hide;
                        } else {
                            $scope.gmessHide = true;
                        }
                        if (response.data.hide_typing_name == false) {
                            $scope.hideTypingName = response.data.hide_typing_name;
                        } else {
                            $scope.hideTypingName = true;
                        }
                        if (response.data.button_style) {
                            $scope.contactButton = 'bubble';
                            if (response.data.button_style === 'bubble') {
                                $scope.hideBtnText = true;
                            }
                        } else {
                            $scope.contactButton = 'bubble';
                            $scope.hideBtnText = true;
                        }
                        if (response.data.show_icon) {
                            $scope.hideBtnIcon = response.data.show_icon;
                        } else {
                            $scope.hideBtnIcon = false;
                        }
                        if (response.data.channels_displacement) {
                            $scope.channelsDisplaycement = response.data.channels_displacement;
                        } else {
                            $scope.channelsDisplaycement = 'standart';
                        }
                        if (response.data.theme && !styleDefault) {
                            $scope.theme = response.data.theme;
                            if (response.data.theme === 'dark') {
                                $scope.poweredLinkColor = 'white';
                            }
                        } else {
                            $scope.theme = 'light';
                        }
                        if (response.data.chat_input_placeholder && !styleDefault) {
                            $scope.chatInput = response.data.chat_input_placeholder;
                        }
                        $scope.changeTheme();
                    }
                });
            };
            $scope.getAdvancedSettings();
            $scope.changeTheme = function () {
                angular.element(document.querySelector('#chatBox')).addClass($scope.theme);
                angular.element(document.querySelector('#frame')).addClass($scope.theme);
                angular.element(document.querySelector('#chat_input')).addClass($scope.theme);
                angular.element(document.querySelector('#ch')).addClass($scope.theme);
                angular.element(document.querySelector('#chIcon')).addClass($scope.theme);
                angular.element(document.querySelector('#pmenuIcon')).addClass($scope.theme);
                angular.element(document.querySelector('#gmess')).addClass($scope.theme);
                angular.element(document.querySelector('#gmess')).html($scope.greetingMess);
            };
            $scope.changeTheme();
            $scope.getMessage = function ($limitMess) {
                var deferred = $q.defer(),
                    params = '';
                if ($limitMess) {
                    params += '&limit_message_id=' + $limitMess;
                }
                $http.get(HTTPREQ + HOST + $path + 'getMessage' +
                    '?bot_id=' + $rootScope.botID +
                    '&uid=' + $rootScope.userID +
                    '&app=' + $rootScope.appID +
                    '&message_id=' + $scope.lastMessageID + params +
                    '&user_id=' + $rootScope.userID)
                    .then(function (response) {
                        chatLogin = response.headers('ChatLogin');
                        if (chatLogin && !$rootScope.userID) {
                            $userID = chatLogin;
                            $rootScope.path = 'webchat.subscribe'
                            /*socketService.send({
                                path: 'webchat.subscribe', data: {
                                    user: $rootScope.userID,
                                    bot: parseInt($rootScope.botID)
                                }
                            });*/
                            // $scope.ws.Emit('subscribe', JSON.stringify({
                            //     user: $rootScope.userID,
                            //     bot: parseInt($rootScope.botID)
                            // }));
                        }
                        var messages = response.data,
                            list;
                        if (messages !== 'null') {
                            messages.sort(function (a, b) {
                                if (!a || !b) {
                                    return 0;
                                }
                                if (a.date > b.date) {
                                    return 1;
                                }
                                if (a.date === b.date) {
                                    if (a.id > b.id) {
                                        return 1;
                                    }
                                    if (a.id < b.id) {
                                        return -1;
                                    }
                                }
                                if (a.date < b.date) {
                                    return -1;
                                }
                                return 0;
                            });
                            list = $scope.getIdList($scope.messages);
                            $replies = false;
                            angular.forEach(messages, function (value, key) {
                                value.date = $scope.formatDate(value.date);
                                if (!!value.attachments) {
                                    attachments = JSON.parse(value.attachments);
                                    $replies = attachments.quick_replies;
                                }

                                if (list.indexOf(value.id) === -1) {
                                    if ($scope.messages.length > 0 && $scope.pushedIndex !== null && value.message !== '' && $scope.messages[$scope.messages.length - 1 - key] && !$scope.messages[$scope.messages.length - 1 - key].id) {
                                        $scope.messages[$scope.messages.length - 1 - key].id = value.id;
                                        $scope.messages[$scope.messages.length - 1 - key].date = value.date;
                                    } else {
                                        if (value.message !== '' || value.cards) {
                                            $scope.messages.push(value);
                                        }
                                    }
                                }
                            });
                            if ($replies && $replies.length) {
                                $scope.suggesteds = $replies;
                            }
                            $scope.pushedIndex = null;
                            if (messages && messages.length) {
                                $scope.lastMessageID = messages[messages.length - 1].id;
                            }
                            scrollArea = document.getElementById('chatBox');
                            if (scrollArea) {
                                $timeout(function () {
                                    scrollArea.scrollTop = scrollArea.scrollHeight;
                                }, 0);
                            }
                            angular.element('#chat_input').focus();
                        } else {
                            if (!$scope.messages || !$scope.messages.length) {
                                $scope.messages = [];
                                //$timeout(function () {
                                $scope.sendMessage('\u03ca\u0651\u0555');
                                //});
                            }
                        }
                        deferred.resolve(true);
                        /*if ($scope.firstScroll && $scope.messages && $scope.messages.length) {
                         $scope.chatScroll();
                         }*/
                    }, function (data) {
                        deferred.reject(data);
                    });
                return deferred.promise;
            };
            $scope.getIdList = function (messages) {
                var list = [];
                angular.forEach(messages, function (value, key) {
                    list.push(parseInt(value.id));
                });
                return list;
            };
            $scope.lastMessageID = 0;
            $scope.mess = '';

            var extractHostname = function (url) {
                var matches = url.match(/^(?:https?:)?(?:\/\/)?([^\/? \?]+)/i);
                var domain = matches && matches[1];
                return domain;
            }

            var checkLink = function (mes) {
                if (mes.indexOf('http') != -1) {
                    var link = extractHostname(mes);
                    var a = '<a href="$1" target="_blank" class="message__link">' + link + '</a>';
                    return mes.replace(/(?:(https?\:\/\/[^\s]+))/m, a);
                } else {
                    return mes;
                }
            }
            $scope.disabeSendButton = false;
            var extractHostname = function (url) {
                var matches = url.match(/^(?:https?:)?(?:\/\/)?([^\/? \?]+)/i);
                var domain = matches && matches[1];
                return domain;
            }

            var checkLink = function (mes) {
                if (mes.indexOf('http') != -1) {
                    var link = extractHostname(mes);
                    var a = '<a href="$1" target="_blank" class="message__link">' + link + '</a>';
                    return mes.replace(/(?:(https?\:\/\/[^\s]+))/m, a);
                } else {
                    return mes;
                }
            }
            $scope.sendMessage = function (res) {
                $scope.blocked_input = false;
                $scope.suggesteds = [];
                // var mess = checkLink($scope.mess);
                var mess = $scope.mess;

                if (res) {
                    mess = res;
                }
                if (mess !== '' && mess !== undefined) {
                    if (mess === '\u03ca\u0651\u0555') {
                        mess = '';
                    } else if (mess.length > 19 && mess.substr(0, 19) === 'Read Here: RSSNews ') {
                        $scope.pushedIndex = $scope.messages.push({
                            direction: 'to_bot',
                            message: 'Read Here'
                        });
                    } else if (mess.length > 22 && mess.substr(0, 22) === 'More Stories: RSSNews ') {
                        $scope.pushedIndex = $scope.messages.push({
                            direction: 'to_bot',
                            message: 'More Stories'
                        });
                    } else {
                        $scope.pushedIndex = $scope.messages.push({
                            direction: 'to_bot',
                            message: mess
                        });
                    }
                    $scope.disabeSendButton = true;
                    $scope.pushedIndex = $scope.messages.length - 1;
                    //$scope.typingTurnOn();

                    $http.get('/api/getUserAgentAndIp').then(function (response) {
                        var data = {
                            message: mess,
                            from: $rootScope.userID,
                            bot_id: parseInt($rootScope.botID, 10),
                            app_id: $rootScope.appID
                        }
                        var url = HTTPREQ + HOST + $path;
                        if (response.data.data) {
                            var ip = ''
                            if (response.data.data.ip) {
                                ip = response.data.data.ip
                            }
                            data = {
                                message: mess,
                                from: $rootScope.userID,
                                ua: response.data.data.ua,
                                ip: ip,
                                bot_id: parseInt($rootScope.botID, 10),
                                app_id: $rootScope.appID
                            }
                        }
                        $http.post(url + 'sendMessage', data).then(function (response) {
                            $scope.mess = '';
                            mess = '';
                            if (response.status === 200) {
                                $scope.disabeSendButton = false;
                                if (response.data.suggested && response.data.suggested.length) {
                                    $scope.suggesteds = response.data.suggested;
                                }
                                $scope.blocked_input = response.data.blocked_input;
                                if (response.data.messageID && response.data.messageID !== 0) {
                                    i = angular.copy($scope.messages).length - 1;
                                    $scope.parseAddress(response.data.extracted);
                                    demoMessages = $scope.messages[i];
                                    demoMessages.id = response.data.messageID;
                                    demoMessages.date = $scope.formatDate(response.data.date);
                                    demoMessages.moduleType = response.data.type;
                                    demoMessages.highlight = response.data.highlight;
                                    demoMessages.direction = 'to_bot';
                                    demoMessages.message = $scope.messages[i] ? $scope.messages[i].message : '';
                                    demoMessages.extracted = $scope.extractedAddress;
                                    $scope.messages[i] = demoMessages;
                                    for (j = 0; j < $scope.messages.length; j++) {
                                        if ($scope.messages[j].direction === 'to_bot') {
                                            $http.get(HTTPREQ + HOST + $path + 'highlight?messageID=' + $scope.messages[j].id).then(function (extracted) {
                                                if (extracted.data.status && extracted.data.extracted && extracted.data.extracted.length) {
                                                    for (z = 0; z < $scope.messages.length; z++) {
                                                        if ($scope.messages[z].id === extracted.data.messageID) {
                                                            $scope.parseAddress(extracted.data.extracted);
                                                            $scope.messages[z].extracted = $scope.extractedAddress;
                                                            break;
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            } else {
                                $mdDialog.show(
                                    $mdDialog.alert()
                                        .title('Warning')
                                        .textContent('Oops, something was wrong, please contact technical support')
                                        .ok('Ok')
                                ).then(function () {
                                    $scope.disabeSendButton = false;
                                });
                            }
                            $timeout(function () {
                                $('#chat_input').focus();
                            }, 500)
                        });
                        // }, function (error) {
                        // });
                    });
                };
            };

            $scope.servicesObject = {
                email: MailService,
                sms: SmsService,
                slack: SlackService,
                skype: SkypeService,
                fb: FBService
            };
            $scope.hrefImg = function (url) {
                if (url) {
                    if (url.indexOf('://') !== -1) {
                        window.open(url);
                    } else {
                        window.open('http://' + url);
                    }
                }
            };
            $scope.chatHrefImg = $rootScope.$on('chatHrefImg', function (ev, url) {
                $scope.hrefImg(url);
            });
            $scope.$on('$destroy', $scope.chatHrefImg);
            $scope.href = function (button) {
                if (button.type === 'url') {
                    if (button.value.indexOf('://') !== -1) {
                        window.open(button.value);
                    } else {
                        window.open('http://' + button.value);
                    }
                } else if (button.type === 'payment') {
                    window.open(HTTPREQ + HOST + '/bot/api/payment/id' + button.id + '/bid' + $rootScope.botID + '/uid' + $rootScope.userID + '/chwebchat');
                } else if (button.type === 'module') {
                    moduleID = parseInt(button.value);
                    moduleExist = false;
                    for (var key in $scope.modules) {
                        if ($scope.modules[key].id == moduleID) {
                            moduleExist = true;
                            break;
                        }
                    }
                    if (moduleExist == true) {
                        $scope.changeModule(button.value);
                    } else {
                        $scope.typingTurnOn();
                        $timeout(function () {
                            $scope.typingTurnOff();
                        }, 500);
                    }
                } else if (button.type === 'phone') {
                    button.showPhone = true;
                    location.href = 'tel: ' + button.value;
                }
            };
            $scope.parseAddress = function (data) {
                var returnData;
                if (data && data[0].message != '') {
                    angular.forEach(data, function (value, key) {
                        if (value.type == 15 || value.type == 20) {
                            var dataMessage;
                            dataMessage = value.message.replace(/\\/g, '');
                            dataMessage = dataMessage.replace('"{', '{').replace('}"', '}');
                            var extracted = {};
                            extracted = angular.fromJson(dataMessage);
                            data[key].message = extracted.address + ' (' + extracted.coordinates.lat + ', ' + extracted.coordinates.lng + ')';
                            data[key].highlight = value.highlight;
                            data[key].type = value.type;
                        }
                    });
                    returnData = data;
                } else {
                    returnData = data;
                }
                $scope.extractedAddress = returnData;
            };
            $scope.clickButton = function (button, messageIdx, cardIdx, itemIdx) {
                if (button == 'readHere') {
                    if ($scope.messages[messageIdx]) {
                        message = $scope.messages[messageIdx];
                        if (message.cards && message.cards[cardIdx] && message.cards[cardIdx].rssCard && message.cards[cardIdx].rssCard.rss &&
                            message.cards[cardIdx].rssCard.rss.Items && message.cards[cardIdx].rssCard.rss.Items[itemIdx]) {
                            item = message.cards[cardIdx].rssCard.rss.Items[itemIdx]
                            missArticles = message.cards[cardIdx].rssCard.missStories;
                            $scope.sendMessage('Read Here: RSSNews #' + message.cards[cardIdx].rssCard.id + '#' + missArticles + '#' + message.cards[cardIdx].rssCard.rss.Items[itemIdx].Title);
                        }
                    }
                }
                if (button == 'moreStories') {
                    if ($scope.messages[messageIdx]) {
                        message = $scope.messages[messageIdx];
                        if (message.cards && message.cards[cardIdx] && message.cards[cardIdx].rssCard && message.cards[cardIdx].rssCard.rss &&
                            message.cards[cardIdx].rssCard.rss.Items) {
                            $scope.sendMessage('More Stories: RSSNews #' + message.cards[cardIdx].id + '#' + (message.cards[cardIdx].rssCard.missStories + message.cards[cardIdx].rssCard.countStories - 1));
                        }
                    }
                }
                /* if (button == 'subscribe') {
                    if ($scope.messages[messageIdx]) {
                        message = $scope.messages[messageIdx];
                        if (message.cards && message.cards[cardIdx] && message.cards[cardIdx].rssCard && message.cards[cardIdx].rssCard.rss &&
                            message.cards[cardIdx].rssCard.rss.Items) {
                            $scope.sendMessage('Subscribe#' + message.cards[cardIdx].id);
                        }
                    }
                } */
            }
            $scope.chatHref = $rootScope.$on('chatHref', function (ev, button) {
                $scope.href(button);
            });
            $scope.$on('$destroy', $scope.chatHref);
            $scope.changeModuleBlock = false;
            $scope.changeModule = function (id, state) {
                if (!state) {
                    state = 0;
                }
                if ($scope.changeModuleBlock) {
                    return;
                }
                $scope.suggesteds = [];
                $scope.TestingBot = true;
                $scope.typingTurnOn();
                $scope.changeModuleBlock = true;
                data = {
                    bot_id: parseInt($rootScope.botID, 10),
                    user_id: $rootScope.userID,
                    app_id: $rootScope.appID,
                    module_id: parseInt(id, 10),
                    state: parseInt(state, 10)
                }
                $http.post(HTTPREQ + HOST + $path + 'changeModule', data).then(
                    function () {
                        $scope.changeModuleBlock = false;
                    }, function () {
                        $scope.changeModuleBlock = false;
                    }
                );
            };
            $scope.clearTestChat = function () {
                if (!$scope.testingMode) {
                    return false;
                }
                $scope.disableSendButton = false;
                $scope.blockedPage = false;
                $scope.blocked_input = false;
                $scope.messages = [];
                $scope.suggesteds = [];
                return true;
            };
            $scope.socketReconect = function () {
                //$scope.ws.Emit('close');

                // socketService.send({
                //     path: 'webchat.close'
                // });
                if ($scope.testingMode) {
                    $rootScope.userID = 'webchat.' + Date.now() + '.testing';
                    $scope.clearTestChat();
                }
                $rootScope.path = 'test.subscribe'
                socketService.send({
                    path: 'test.subscribe', data: {
                        bot: parseInt($rootScope.botID),
                        user: $rootScope.userID,
                        type: $scope.testingMode ? 'testing' : 'web',
                        resubscribe: false
                    }
                });
            };
            $scope.clearAndReloadTestChat = function () {
                var moduleId;
                $scope.disableReload = true;
                $scope.disabeSendButton = false;
                $scope.socketReconect();
                if ($scope.chatModuleId) {
                    moduleId = $scope.chatModuleId;
                } else {
                    if ($scope.startModule && $scope.startModule.id) {
                        moduleId = $scope.startModule.id;
                    }
                }
                if (moduleId) {
                    $scope.changeModule(moduleId);
                } else {
                    $timeout(function () {
                        $scope.clearAndReloadTestChat();
                    });
                }
                $timeout(function () {
                    $scope.disableReload = false;
                }, 1500);
            };
            $scope.findStartModule = function () {
                var data, idx;
                $scope.startModule = null;
                for (idx in $scope.modules) {
                    if ($scope.modules[idx].start_module) {
                        if (!$scope.startModule) {
                            $scope.startModule = $scope.modules[idx];
                        } else {
                            $scope.modules[idx].start_module = 0;
                        }
                        if ($rootScope.webChatBotStore === true && $scope.startModule) {
                            $timeout(function () {
                                $scope.clearAndReloadTestChat();
                            }, 3000);
                        }
                        //break;
                    }
                }
                if (!$scope.startModule && $scope.modules && $scope.modules[0]) {
                    $scope.startModule = $scope.modules[0];
                }
                data = $scope.startModule;
                $scope.$emit('findStartModule', data);
            };
            $scope.startModule = null;
            $scope.getModules = function () {
                $rootScope.modulesLoaded = false;
                if ($rootScope.botID) {
                    var imgLogo, imgHeader;
                    $http.post('/bot/api/modules/getModules', $rootScope.botID).then(function (response) {
                        var data = [];
                        if (response.data.img === '' || response.data.img === false || response.data.img === '/img/channels/web.png') {
                            $scope.issetImgHeader = false;
                            imgHeader = '';
                        } else {
                            imgHeader = response.data.img;
                        }
                        if (response.data.img !== '') {
                            imgLogo = response.data.img;
                        } else {
                            imgLogo = '';
                        }
                        $scope.bot = {
                            name: response.data.botName,
                            icon: imgLogo,
                            icon_header: imgHeader,
                            synonymsEnable: response.data.synonyms_enable,
                            integration_ai: response.data.integration_ai
                        };
                        modules = response.data.modules;
                        for (var key in modules) {
                            modules[key]
                        }
                        $scope.modules = response.data.modules;
                        $scope.findStartModule();
                        $scope.runSocket();
                        data[0] = $scope.bot;
                        data[1] = response.data.modules
                        $scope.$emit('getModules', data);
                        $rootScope.modulesLoaded = true;
                    }, function () {
                    });
                }
            };
            $scope.getModules();

            onSubscribe = function (subscribe) {
                subscribe.clear_test_chat = false
                if ($rootScope.path && $rootScope.path == 'test.subscribe') {
                    subscribe.renew = false
                }
                lastMessage = parseInt(subscribe.last_message);
                if (!$scope.testingMode && subscribe.usertoken && !$rootScope.userID) {
                    $rootScope.userID = subscribe.usertoken;
                    if (!$scope.testingMode) {
                        $scope.userID = $rootScope.userID;
                    }
                    $cookies.put('ChatLogin', $rootScope.userID);
                }
                if (subscribe.resubscribe) {
                    return;
                }
                if (subscribe.renew) {
                    $scope.typingTurnOn();
                    $scope.renewMessages();
                } else if (!$scope.messages || !$scope.messages.length && !$scope.testingMode) {
                    $scope.renewMessages();
                }
            };
            onNotify = function (notify) {
                // var deferred = $q.defer();
                // $scope.ws.notify = deferred.promise;
                // notify = JSON.parse(message);
                //notify.response.message = checkLink(notify.response.message);
                if (notify.response.moduleID != 0) {
                    if (notify.response.cards && notify.response.cards[0]) {
                        $scope.lastmodule = notify.response.cards[0].module_id;
                    } else {
                        $scope.lastmodule = notify.response.moduleID;
                    }
                }
                if (notify.renew !== $rootScope.userID || notify.bot !== $rootScope.botID) {
                    return;
                }
                if (notify.response) {
                    if (notify.response.nlpResp && notify.response.nlpResp.apiResponse.response.predict) {
                        var words = [];
                        if (notify.response.nlpResp.apiResponse.response.predict[0].entities) {
                            angular.forEach(notify.response.nlpResp.apiResponse.response.predict[0].entities[0].matches, function (x) {
                                if (words.indexOf(x.word) == -1) {
                                    words.push(x.word)
                                }
                            })
                        }

                        var i = $scope.messages.length;
                        while (i--) {
                            if ($scope.messages[i].direction == 'to_bot') {
                                $scope.messages[i].modelData = notify.response.nlpResp.model
                                $scope.messages[i].nlpResp = words;
                                break;
                            }
                        }
                    }
                    notify.response.direction = 'from_bot';
                    notify.response.date = $scope.formatDate(notify.response.date);
                    $scope.suggesteds = notify.response.replies;
                    if (!!notify.response.next) {
                        $scope.blocked_input = true;
                    } else {
                        if (!$scope.suggesteds || !$scope.suggesteds.length) {
                            $scope.blocked_input = false;
                        } else {
                            $scope.blocked_input = notify.response.blocked_input;
                        }
                    }
                    if ($scope.getIdList($scope.messages).indexOf(parseInt(notify.response.id)) === -1) {
                        $scope.messages.push(notify.response);
                    } else {
                        angular.forEach($scope.messages, function (val, index) {
                            if (val.ID === notify.response.id) {
                                $scope.messages[index] = notify.response;
                                return false;
                            }
                        });
                    }
                    if (!$scope.$$phase) {
                        $timeout(function () {
                            $scope.$apply();
                        });
                    }
                    $timeout(function () {
                        if (notify.response.next) {
                            $scope.typingTurnOn();
                        } else {
                            $scope.typingTurnOff();
                        }
                    });
                } else {
                    $timeout(function () {
                        $scope.getMessage(notify.limit_message_id)
                            .then(function (resp) {
                                console.log('Notify get message success: ', resp.data)
                                $scope.typingTurnOff();
                            }, function (err) {
                                console.log('Notify get message error: ', err.data)
                                $scope.typingTurnOff();
                            });
                    }, 500);
                }
            };
            onTyping = function (typing) {
                typing.on = !typing.off;
                $timeout(function () {
                    if (typing.on) {
                        $scope.typingTurnOn();
                    } else {
                        $scope.typingTurnOff();
                    }
                });
            };
            $scope.openNewChannel = function (channel, event) {
                if ($scope.servicesObject[channel]) {
                    $scope.servicesObject[channel].openChanel(event);
                }
            };
            $scope.formatDate = function (value) {
                if (!value) {
                    return '';
                }
                var dat = new Date(value),
                    date = dat.getUTCFullYear() +
                        '-' + (dat.getMonth() < 9 ? '0' : '') + (dat.getMonth() + 1) +
                        '-' + (dat.getDate() < 10 ? '0' : '') + dat.getDate() +
                        ' ' + (dat.getHours() < 10 ? '0' : '') + dat.getHours() +
                        ':' + (dat.getMinutes() < 10 ? '0' : '') + dat.getMinutes() +
                        ':' + (dat.getSeconds() < 10 ? '0' : '') + dat.getSeconds();
                return date;
            };
            $scope.getIdList = function (messages) {
                var list = [];
                angular.forEach(messages, function (value, key) {
                    list.push(value.id);
                });
                return list;
            };
            $scope.renewMessages = function (test) {
                $scope.messages = [];
                $scope.lastMessageID = 0;
                $scope.getMessage();
            };
            $scope.chatTestModule = $rootScope.$on('chatTestModule', function (ev, data) {
                if (data.module) {
                    $scope.disableReload = true;
                    $scope.pushedIndex = null;
                    $scope.disableSendButton = true;
                    $scope.socketReconect();
                    $scope.chatModuleId = data.module.id;
                    if (data.state == true) {
                        $scope.changeModule($scope.chatModuleId, 1);
                    } else {
                        $scope.changeModule($scope.chatModuleId, 0);
                    }
                    $timeout(function () {
                        $scope.disableReload = false;
                    }, 1500);
                }
                if (data.modules) {
                    $scope.modules = data.modules;
                }
            });
            $scope.$on('$destroy', $scope.chatTestModule);

            $scope.$on('$destroy', function () {
                if ($scope.ws) {
                    $scope.ws.Disconnect();
                }
            });
            /* $scope.Bot2Ctrl_ModulesUpdate = $rootScope.$on('Bot2Ctrl_ModulesUpdate', function (ev, modules) {
                $scope.modules = modules;
                $scope.findStartModule();
            }); */
            //$scope.$on('$destroy', $scope.Bot2Ctrl_ModulesUpdate);
            // $scope.socketDelete = function () {
            //     if (!$scope.ws) {
            //         return;
            //     }
            //     $scope.notFirstSubscribe = false;
            //     // socketService.send({
            //     //     path: 'webchat.close'
            //     // });
            //     $scope.ws.conn.close();
            //     $scope.ws.Disconnect();
            //     delete $scope.ws;
            //     delete $rootScope.sokets[$scope.chatSocketID];
            // };
            $scope.checkURL = function (url) {
                if (!url || url == '') {
                    return false;
                }
                pattern = /^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/;
                if (url.match(pattern)) {
                    return true;
                }
                return false;
            }
        }
    })
    .directive('readrotateimagewebchat', ['$rootScope', '$http', '$timeout', '$mdDialog', function ($rootScope, $http, $timeout, $mdDialog) {
        return {
            link: function (scope, element, attributes) {
                var url = scope.card.value,
                    meta,
                    loc = window.location.origin,
                    resp,
                    t = 0;

                if (!(/iP(hone|od|ad)/.test(navigator.platform))) {
                    function rotateMobilePhoto(imgOrient, element) {
                        switch (imgOrient) {
                            case 3:
                                $(element).addClass('webchat-orient-3');
                                break;
                            case 6:
                                if (!(/iP(hone|od|ad)/.test(navigator.platform))) {
                                    $(element).addClass('webchat-orient-6');
                                    $(element).css({ 'margin-right': '100px' });
                                    $(element).parent().addClass('prt-webchat-orient-6');
                                } else {
                                    $(element).css({ 'height': '175px' });
                                }
                                break;
                            case 8:
                                $(element).addClass('webchat-orient-8');
                                $(element).parent().addClass('prt-webchat-orient-8');
                                break;
                            default:
                                break;
                        }
                    }
                    function readFileForRotate(file) {
                        var fileReader = new FileReader();
                        fileReader.onload = function () {
                            var exif = EXIF.readFromBinaryFile(this.result);
                            if (exif.Orientation !== undefined) {
                                rotateMobilePhoto(exif.Orientation, element);
                            }
                        }
                        fileReader.readAsArrayBuffer(file);
                    }
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', url, true);
                    xhr.responseType = 'arraybuffer';
                    xhr.setRequestHeader('Access-Control-Allow-Origin', loc);
                    xhr.setRequestHeader('Cache-Control', 'no-cache');
                    xhr.onload = function () {
                        resp = this.response;
                        var int8 = new Uint8Array(resp);
                        var blob = new Blob([int8]);
                        readFileForRotate(blob);
                    }
                    xhr.onerror = function () {
                        t += 1;
                        if (t < 4) {
                            sendRequestImage(url, loc);
                        } else {
                            $mdDialog.show(
                                $mdDialog
                                    .alert()
                                    .clickOutsideToClose(true)
                                    .title('Internal Server Error')
                                    .textContent('Can\'t reverse an image. Image\'s server error')
                                    .ok('ok')
                            );
                        }
                    }
                    xhr.send();
                }
            }
        }
    }]).directive('readrotategallerywebchat', ['$rootScope', '$http', '$timeout', '$mdDialog', function ($rootScope, $http, $timeout, $mdDialog) {
        return {
            link: function (scope, element, attributes) {
                if (!(/iP(hone|od|ad)/.test(navigator.platform))) {
                    var meta,
                        loc = window.location.origin,
                        resp,
                        t = 0;

                    function rotateMobilePhoto(imgOrient, element) {
                        switch (imgOrient) {
                            case 3:
                                $(element).addClass('webchat-orient-3');
                                break;
                            case 6:
                                $(element).parent('a').css({ 'transform': 'rotate(90deg)', 'width': '160px', 'height': '160px' });
                                $(element).parent('a').parent('div').css({ 'height': '180px' });
                                $(element).parent('a').parent('div').parent('div').css({ 'height': 'inherit' });
                                $(element).parent('a').parent('div').parent('div').parent('div').css({ 'height': '180px' });
                                break;
                            case 8:
                                $(element).parent('a').css({ 'transform': 'rotate(-90deg)', 'width': '160px', 'height': '160px' });
                                $(element).parent('a').parent('div').css({ 'height': '180px' });
                                $(element).parent('a').parent('div').parent('div').css({ 'height': 'inherit' });
                                $(element).parent('a').parent('div').parent('div').parent('div').css({ 'height': '180px' });
                                break;
                            default:
                                break;
                        }
                    }
                    function readFileForRotate(file) {
                        var fileReader = new FileReader();
                        fileReader.onload = function () {
                            var exif = EXIF.readFromBinaryFile(this.result);
                            if (exif.Orientation !== undefined) {
                                rotateMobilePhoto(exif.Orientation, element);
                            }
                        }
                        fileReader.readAsArrayBuffer(file);
                    }
                    if (scope.gallery) {
                        var url = scope.gallery.image
                        var xhr = new XMLHttpRequest();
                        xhr.open('GET', url);
                        xhr.responseType = 'arraybuffer';
                        xhr.setRequestHeader('Access-Control-Allow-Origin', loc);
                        xhr.setRequestHeader('Cache-Control', 'no-cache');
                        xhr.onload = function () {
                            resp = this.response;
                            var int8 = new Uint8Array(resp);
                            var blob = new Blob([int8]);
                            setTimeout(readFileForRotate(blob), 1500);
                        }
                        xhr.onerror = function () {
                            t += 1;
                            if (t < 4) {
                                sendRequestImage(url, loc);
                            } else {
                                $mdDialog.show(
                                    $mdDialog
                                        .alert()
                                        .clickOutsideToClose(true)
                                        .title('Internal Server Error')
                                        .textContent('Can\'t reverse an image. Image\'s server error')
                                        .ok('ok')
                                );
                            }
                        }
                        xhr.send();
                    }
                }
            }
        }
    }]);

angular.module('ChatApp')
    .filter('unsafe', ['$sce', function ($sce) {
        return $sce.trustAsHtml;
    }])
    .filter('unsafelink', ['$sce', function ($sce) {
        return $sce.trustAsUrl;
    }]);

angular.module('ChatApp')
    .service('FBService', ['$q', '$http', '$rootScope', function ($q, $http, $rootScope) {
        this.openChanel = function (ev) {
            var newstr = $rootScope.activeChannels.fb.linkSwitch.replace('https://www.messenger.com/t/', '');
            url = 'https://m.me/' + newstr;
            ref = '?ref=' + encodeURIComponent('' + $rootScope.botID + '|' + $rootScope.userID);
            redirect = '/bot/api/redirect/params?url=' + encodeURIComponent(url) + '&t=' + Date.now() + '&add=' + encodeURIComponent(ref) + '&bid=' + $rootScope.botID + '&uid=' + $rootScope.userID;
            window.open(redirect);
        };
    }]);

angular.module('ChatApp')
    .service('MailService', ['$http', '$mdDialog', '$rootScope', '$timeout', function ($http, $mdDialog, $rootScope, $timeout) {
        this.openChanel = function (ev) {
            $mdDialog.show({
                    controller: DialogCtrl,
                    scope: $rootScope,
                    preserveScope: true,
                    templateUrl: '../html/switch_chanel/email.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function (answer) {}, function () {});
        };

        function DialogCtrl() {
            $timeout(function () {
                angular.element('#channelMail').focus();
            }, 500);

            $rootScope.saveEmail = function () {

                $http.post('/channels/api/manager/addChannelToConversation', {
                    bot_id: parseInt($rootScope.botID, 10),
                    new_channel: 'email',
                    new_channel_key: '5',
                    user_id: $rootScope.userID,
                    new_user_id: $rootScope.switchChannelData.email
                }).then(function (response) {

                }, function (resp) {});

                $mdDialog.hide();
            };
            $rootScope.cancelEmail = function () {
                $mdDialog.hide();
            };
        }
    }]);

angular.module('ChatApp')
    .service('SkypeService', ['$http', '$mdDialog', '$rootScope', function ($http, $mdDialog, $rootScope) {
        this.openChanel = function (ev) {
            $mdDialog.show({
                controller: DialogCtrl,
                scope: $rootScope,
                preserveScope: true,
                templateUrl: '../html/switch_chanel/skype.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            })
            .then(function (answer) {
            }, function () {
            });
        };
        function DialogCtrl() {
            $rootScope.saveLogin = function () {

                $http.post('/bot/api/conversation/id' + $rootScope.botID, {
                    newChannel: 'skype',
                    newChannelKey: '6',
                    userID: $rootScope.userID,
                    newUserID: $rootScope.switchChannelData.login
                }).then(function (response) {
                    url = 'https://web.skype.com';
                    redirect = '/redirect/params?url=' + encodeURIComponent(url);
                    window.open(url, '_blank');
                }, function (resp) {});

                $mdDialog.hide();
            };
            $rootScope.cancelLogin = function () {
                $mdDialog.hide();
            };
        }
    }]);

angular.module('ChatApp')
    .service('SlackService', ['$http', '$mdDialog', '$rootScope', function ($http, $mdDialog, $rootScope) {
        this.openChanel = function (ev) {
            $http.get('/api/getSlack/' + $rootScope.botID).then(function (response) {
                if (response.data.status) {
                    // usrQuery = '';
                    // appQuery = '';

                    // if ($rootScope.userID && $rootScope.userFromParams) {
                    //     usrQuery = '&oldUser=' + $rootScope.userID;
                    // }
                    // if ($rootScope.appID) {
                    //     appQuery = '&app=' + $rootScope.appID;
                    // }
                    // if ($rootScope.botID && $rootScope.userID) {
                    //     location.href = 'https://' + HOST + '/channel/slack/getLastMessage/id' + $rootScope.botID + '/id' + $rootScope.userID;
                    // }
                    if ($rootScope.botID && $rootScope.userID) {
                        $http.post('/channels/api/manager/addChannelToConversation', {
                            bot_id: +$rootScope.botID,
                            new_channel: 'slack',
                            new_channel_key: '2',
                            user_id: $rootScope.userID,
                            new_user_id: response.data.botsMeta.user_id
                        }).then(function (response) {
                            window.open('https://' + HOST + '/channels/api/slack/getLastMessage?botID=' + $rootScope.botID + '&userID=' + $rootScope.userID);
                            // location.href = 'https://' + HOST + '/channel/slack/getLastMessage/id' + $rootScope.botID + '/id' + $rootScope.userID;
                        }, function (error) {
                            console.log('redirect error: ', error)
                        });
                    }
                    // if (response.data.botsMeta.chat_url) {
                    //     location.href = response.data.botsMeta.chat_url;
                    // } else {
                    //     location.href = 'https://slack.com/oauth/authorize?scope=' +
                    //         encodeURIComponent('bot chat:write:user') +
                    //         '&client_id=' + response.data.k +
                    //         '&redirect_uri=' + encodeURIComponent('https://' + HOST + '/channel/slack/auth/id' + $rootScope.botID);
                    // }
                }
            }, function (resp) {});
        };
    }]);

angular.module('ChatApp')
    .service('SmsService', ['$http', '$mdDialog', '$rootScope', '$timeout', function ($http, $mdDialog, $rootScope, $timeout) {
        this.openChanel = function (ev) {
            $mdDialog.show({
                    controller: DialogCtrl,
                    scope: $rootScope,
                    preserveScope: true,
                    templateUrl: '../html/switch_chanel/sms.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function (answer) {}, function () {});
        };

        function DialogCtrl() {
            $timeout(function () {
                angular.element('#channelSms').focus();
            }, 500);
            $rootScope.savePhone = function () {
                $http.post('/bot/api/conversation/id' + $rootScope.botID, {
                    newChannel: 'sms',
                    newChannelKey: '8',
                    userID: $rootScope.userID,
                    newUserID: $rootScope.switchChannelData.phone
                }).then(function (response) {
                }, function (resp) {});
                $mdDialog.hide();
            };
            $rootScope.cancelPhone = function () {
                $mdDialog.hide();
            };
        }
    }]);

angular.module('SnatchApp')
    .factory('socketService', ['$location', '$timeout', '$rootScope', function ($location, $timeout, $rootScope) {
        var service = {};

        service.connect = function (sName) {
            if (!sName) {
                sName = 'default'
            }
            if (service.ws) {
                service.ws.close(1000, 'refresh');
            }
            this.sName = sName;
            socketProtocol = 'ws';
            if ($location.protocol() === 'https') {
                socketProtocol = 'wss';
            }

            var ws = new ReconnectingWebSocket(socketProtocol + '://' + $location.host() + '/bot/ws');
            ws.onopen = function () {
                if ($rootScope.path) {
                    switch ($rootScope.path) {
                        case 'test.subscribe':
                            service.ws.send(JSON.stringify({
                                path: $rootScope.path, data: {
                                    user: $rootScope.userID,
                                    bot: parseInt($rootScope.botID),
                                    type: 'testing',
                                    resubscribe: false
                                }
                            }));
                            break
                        case 'webchat.subscribe':
                            service.ws.send(JSON.stringify({
                                path: $rootScope.path, data: {
                                    user: $rootScope.userID,
                                    bot: parseInt($rootScope.botID),
                                    type: 'web',
                                    resubscribe: false
                                }
                            }));
                            break
                        default:
                            service.ws.send(JSON.stringify({
                                path: $rootScope.path, data: {
                                    user: $rootScope.userID,
                                    bot: parseInt($rootScope.botID)
                                }
                            }));
                            break
                    }
                }
                if (!service.callback) {
                    return
                }
                service.callback({
                    status: 'ok',
                    msg: 'Succeeded to open a connection...'
                });
            };

            ws.onerror = function () {
                if (!service.callback) {
                    return
                }
                service.callback({
                    status: 'ok',
                    msg: 'Failed to open a connection...'
                });
            }

            ws.onmessage = function (message) {
                var j = JSON.parse(message.data);
                if (j.path == 'conversation.AR') {
                    $rootScope.convAr = j.data;
                }
                if (!service.callback) {
                    return
                }
                service.callback(j);
            };
            service.ws = ws;
        }

        service.send = function (message) {
            if (service.ws && service.ws.readyState === 1) {
                service.ws.send(JSON.stringify(message));
            } else {
                $timeout(function () {
                    service.send(message);
                }, 1000)
            }
        }

        service.subscribe = function (callback, path) {
            service.callback = callback;
        }

        return service;
    }]);
